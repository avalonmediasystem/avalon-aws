AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra application stack
Parameters:
  InfrastructureStack:
    Type: String
    Description: Name of the CloudFormation hydra stack supporting this head
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  S3Bucket:
    Type: String
    Description: S3 bucket with cloudformation templates
  S3BucketEB:
    Type: String
    Description: S3 bucket with the rails application zip
  S3Key:
    Type: String
    Description: S3 key to the rails application zip
  S3KeyPrefix:
    Type: String
    Description: S3 prefix to deployment artifacts
    Default: infrastructure/current
  SlackWebhookToken:
    Type: String
    Description: Slack generated token for Incoming Webhook
    NoEcho: 'true'
    Default: ''
  SlackWebhookChannel:
    Type: String
    Description: Slack channel for posting notifications
    Default: ''
  WebappMinSize:
    Type: Number
    Description: Minimum number of instances
    Default: '1'
  WebappMaxSize:
    Type: Number
    Description: Maximum number of instances
    Default: '4'
  WorkerMinSize:
    Type: Number
    Description: Minimum number of instances
    Default: '1'
  WorkerMaxSize:
    Type: Number
    Description: Maximum number of instances
    Default: '4'
  SecretKeyBase:
    Type: String
    Description: Secret key for Rails
    NoEcho: 'true'
  RDSDatabaseName:
    Type: String
    Description: Database name
  RDSUsername:
    Type: String
    Description: Username for Database
  RDSPassword:
    Type: String
    Description: Password for Database
    NoEcho: 'true'
  WebappInstanceType:
    Type: String
    Description: The EC2 instance type
    Default: 't2.large'
  WorkerInstanceType:
    Type: String
    Description: The EC2 instance type
    Default: 't2.medium'
  WebappHealthReportingSystemType:
    Type: String
    Description: Health reporting system
    AllowedValues:
    - enhanced
    - basic
    Default: enhanced
  WorkerHealthReportingSystemType:
    Type: String
    Description: Health reporting system
    AllowedValues:
    - enhanced
    - basic
    Default: enhanced
  ContinuousDeployment:
    Type: String
    Description: Configure continuous deployment for the webapp and workers?
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
  SSLCertificateId:
    Type: String
    Description: The Amazon Resource Name (ARN) of the SSL certificate
    Default: ''
  ConfigurationBucket:
    Type: String
    Description: The bucket to use for secure configs.
Conditions:
  CreateContinuousDeployment: !Equals [!Ref 'ContinuousDeployment', 'true']
Resources:
  ActiveJobQueueUrlParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/active_job_queue/url"
      Type: "String"
      Value: !Ref DefaultQueue
  AwsBucketsBatchParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/aws/buckets/batch"
      Type: "String"
      Value: !Ref "BatchBucket"
  AwsBucketsDropboxParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/aws/buckets/dropbox"
      Type: "String"
      Value: !Ref "DropboxBucket"
  AwsBucketsPyramidsParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/aws/buckets/pyramids"
      Type: "String"
      Value: !Ref "PyramidsBucket"
  AwsBucketsUploadsParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/aws/buckets/uploads"
      Type: "String"
      Value: !Ref "UploadBucket"
  DomainHostParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/domain/host"
      Type: "String"
      Value: !GetAtt 'webapp.Outputs.URL'
  FedoraUrlParameter:
    Type: "AWS::SSM:Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/fedora/url"
      Type: "String"
      Value:
        Fn::ImportValue: !Sub '${InfrastructureStack}-fcrepo-URL'
  IiifEndpointParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/iiif/endpoint"
      Type: "String"
      Value: "http://d3bwn2uzan42hc.cloudfront.net/iiif/2/"
  SolrUrlParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/solr/url"
      Type: "String"
      Value:
        Fn::Join:
        - '/'
        - - Fn::ImportValue: !Sub '${InfrastructureStack}-solr-URL'
          - !Ref 'AWS::StackName'
  SolrCollectionOptionsReplicationFactorParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/solr/collection_options/replication_factor"
      Type: "String"
      Value: "3"
  SolrCollectionOptionsRuleParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/solr/collection_options/rule"
      Type: "String"
      Value: "shard:*,replica:<2,cores:<5~"
  ZookeeperConnectionStrParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Settings/zookeeper/connection_str"
      Type: "String"
      Value:
        Fn::Join:
        - '/'
        - - Fn::ImportValue: !Sub '${InfrastructureStack}-zookeeper-EndpointAddress'
          - configs
  EFSDerivativeVolumeParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Deploy/derivative_volume"
      Type: "String"
      Value: Value: !Sub '${DerivativeVolume}.efs.${AWS::Region}.amazonaws.com'
  EFSWorkingVolumeParameter:
    Type: "AWS::SSM::Parameter"
    Parameters:
      Name: !Sub "/${StackName}/${HydraApplication}/Deploy/working_volume"
      Type: "String"
      Value: Value: !Sub '${WorkingVolume}.efs.${AWS::Region}.amazonaws.com'
  HydraApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref 'AWS::StackName'
      Description: Hybox service
  HydraApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref 'HydraApplication'
      Description: Hybox service version
      SourceBundle:
        S3Bucket: !Ref 'S3BucketEB'
        S3Key: !Ref 'S3Key'
  slack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SlackWebhookToken: !Ref 'SlackWebhookToken'
        SlackWebhookChannel: !Ref 'SlackWebhookChannel'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/slack.yaml'
  database:
    Type: Custom::DatabaseSchema
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub '${InfrastructureStack}-createdatabase-handler-ServiceToken'
      DBName: !Ref 'RDSDatabaseName'
      DBUser: !Ref 'RDSUsername'
      DBPassword: !Ref 'RDSPassword'
  UploadBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Parameters:
      BucketName: !Sub '${StackName}-${HydraApplication}-upload'
  BatchBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Parameters:
      BucketName: !Sub '${StackName}-${HydraApplication}-batch'
  DropboxBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Parameters:
      BucketName: !Sub '${StackName}-${HydraApplication}-dropbox'
  PyramidsBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Parameters:
      BucketName: !Sub '${StackName}-${HydraApplication}-pyramids'
  UploadBucketAccess:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref 'UploadBucket'
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Resource:
          - !Sub 'arn:aws:s3:::${UploadBucket}'
          - !Sub 'arn:aws:s3:::${UploadBucket}/*'
          Principal:
            AWS:
            - !GetAtt 'EC2Role.Arn'
          Action:
          - 's3:*'
  BatchBucketAccess:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref 'BatchBucket'
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Resource:
          - !Sub 'arn:aws:s3:::${BatchBucket}'
          - !Sub 'arn:aws:s3:::${BatchBucket}/*'
          Principal:
            AWS:
            - !GetAtt 'EC2Role.Arn'
          Action:
          - 's3:Get*'
          - 's3:List*'
  DropboxBucketAccess:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref 'DropboxBucket'
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Resource:
          - !Sub 'arn:aws:s3:::${DropboxBucket}'
          - !Sub 'arn:aws:s3:::${DropboxBucket}/*'
          Principal:
            AWS:
            - !GetAtt 'EC2Role.Arn'
          Action:
          - 's3:Get*'
          - 's3:List*'
  PyramidsBucketAccess:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref 'PyramidsBucket'
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Resource:
          - !Sub 'arn:aws:s3:::${PyramidsBucket}'
          - !Sub 'arn:aws:s3:::${PyramidsBucket}/*'
          Principal:
            AWS:
            - !GetAtt 'EC2Role.Arn'
          Action:
          - 's3:*'
  ConfigurationBucketAccess:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref 'ConfigurationBucket'
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Resource:
          - !Sub 'arn:aws:s3:::${ConfigurationBucket}'
          - !Sub 'arn:aws:s3:::${ConfigurationBucket}/*'
          Principal:
            AWS:
            - !GetAtt 'EC2Role.Arn'
          Action:
          - 's3:Get*'
          - 's3:List*'
  webapp:
    Type: AWS::CloudFormation::Stack
    DependsOn: database
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        ApplicationName: !Ref 'HydraApplication'
        VersionLabel: !Ref 'HydraApplicationVersion'
        KeyName: !Ref 'KeyName'
        MinSize: !Ref 'WebappMinSize'
        MaxSize: !Ref 'WebappMaxSize'
        PublicSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PublicSubnets'
        PrivateSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PrivateSubnets'
        SecurityGroups:
          Fn::Join:
          - ','
          - - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Default'
            - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Webapp'
        LBSecurityGroups:
          Fn::ImportValue: !Sub '${InfrastructureStack}-sg-WebappLb'
        HostedZoneName:
          Fn::ImportValue: !Sub '${InfrastructureStack}-dns-PublicZoneName'
        SecretKeyBase: !Ref 'SecretKeyBase'
        RedisHost:
          Fn::ImportValue: !Sub '${InfrastructureStack}-redis-EndpointAddress'
        RedisPort:
          Fn::ImportValue: !Sub '${InfrastructureStack}-redis-EndpointPort'
        RDSDatabaseName: !Ref 'RDSDatabaseName'
        RDSUsername: !Ref 'RDSUsername'
        RDSPassword: !Ref 'RDSPassword'
        RDSHostname:
          Fn::ImportValue: !Sub '${InfrastructureStack}-db-EndpointAddress'
        RDSPort:
          Fn::ImportValue: !Sub '${InfrastructureStack}-db-EndpointPort'
        BeanstalkSNSTopic: !GetAtt 'slack.Outputs.BeanstalkSNSTopic'
        InstanceType: !Ref 'WebappInstanceType'
        HealthReportingSystemType: !Ref 'WebappHealthReportingSystemType'
        IamInstanceProfile: !GetAtt 'EC2InstanceProfile.Arn'
        SSLCertificateId: !Ref 'SSLCertificateId'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/donut/webapp.yaml'
  workers:
    Type: AWS::CloudFormation::Stack
    DependsOn: database
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        ApplicationName: !Ref 'HydraApplication'
        VersionLabel: !Ref 'HydraApplicationVersion'
        KeyName: !Ref 'KeyName'
        MinSize: !Ref 'WorkerMinSize'
        MaxSize: !Ref 'WorkerMaxSize'
        PublicSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PublicSubnets'
        PrivateSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PrivateSubnets'
        SecurityGroups:
          Fn::Join:
          - ','
          - - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Default'
            - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Webapp'
        LBSecurityGroups:
          Fn::ImportValue: !Sub '${InfrastructureStack}-sg-WebappLb'
        HostedZoneName:
          Fn::ImportValue: !Sub '${InfrastructureStack}-dns-PublicZoneName'
        SecretKeyBase: !Ref 'SecretKeyBase'
        RedisHost:
          Fn::ImportValue: !Sub '${InfrastructureStack}-redis-EndpointAddress'
        RedisPort:
          Fn::ImportValue: !Sub '${InfrastructureStack}-redis-EndpointPort'
        RDSDatabaseName: !Ref 'RDSDatabaseName'
        RDSUsername: !Ref 'RDSUsername'
        RDSPassword: !Ref 'RDSPassword'
        RDSHostname:
          Fn::ImportValue: !Sub '${InfrastructureStack}-db-EndpointAddress'
        RDSPort:
          Fn::ImportValue: !Sub '${InfrastructureStack}-db-EndpointPort'
        DefaultQueue: !Ref 'DefaultQueue'
        BeanstalkSNSTopic: !GetAtt 'slack.Outputs.BeanstalkSNSTopic'
        IamInstanceProfile: !GetAtt 'EC2InstanceProfile.Arn'
        InstanceType: !Ref 'WorkerInstanceType'
        HealthReportingSystemType: !Ref 'WorkerHealthReportingSystemType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/donut/worker.yaml'
  cantaloupe:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        KeyName: !Ref 'KeyName'
        TiffBucket: !Ref 'PyramidsBucket'
        PublicSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PublicSubnets'
        PrivateSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PrivateSubnets'
        S3Bucket: !Ref 'S3S3BucketEB'
        SecurityGroups:
          - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Default'
    TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/cantaloupe.yaml'
  DefaultQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 'DefaultDeadLetterQueue.Arn'
        maxReceiveCount: 5
  DefaultDeadLetterQueue:
    Type: AWS::SQS::Queue
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
      - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
      - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/ConfigurationBucketRead'
      Policies:
      - PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - ses:Send*
            Resource:
            - '*'
            Effect: Allow
        PolicyName: !Sub '${AWS::StackName}-MailerAccess'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'EC2Role'
  codepipeline:
    Type: AWS::CloudFormation::Stack
    Condition: CreateContinuousDeployment
    Properties:
      Parameters:
        ApplicationName: !Ref 'HydraApplication'
        WebappEnvironmentName: !GetAtt 'webapp.Outputs.EnvironmentName'
        WorkerEnvironmentName: !GetAtt 'workers.Outputs.EnvironmentName'
        S3Bucket: !Ref 'S3BucketEB'
        S3Key: !Ref 'S3Key'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/codepipeline.yaml'
  BatchIngestFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        S3Bucket: !Ref 'S3Bucket'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        Package: 'batchingestnotification'
        AllowedActions: 'sqs:*'
        AllowedResources: !GetAtt 'DefaultQueue.Arn'
        Timeout: '60'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/lambdafunction.yaml'
  batchingestconfig:
    Type: Custom::LambdaEnvironmentConfiguration
    Version: '1.0'
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub '${InfrastructureStack}-lambdaenvironment-handler-ServiceToken'
      FunctionName: !GetAtt 'BatchIngestFunction.Outputs.ServiceToken'
      Environment:
        Secret: !Ref 'SecretKeyBase'
        QueueUrl: !Ref 'DefaultQueue'
  EFSSecurityGroup:
    Type: "AWS::EC2:SecurityGroup"
    Properties:
      GroupDescription: !Sub '${HydraApplication} EFS Security Group'
      VpcId:
        Fn::ImportValue: !Sub '${StackName}-vpc-VPCID'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Select [ 0, !Ref 'SecurityGroups' ]
        IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
  DerivativeVolume:
    Type: "AWS::EFS::FileSystem"
    DeletionPolicy: Retain
    Properties:
      FileSystemTags:
      - Key: Name
        Value: !Sub '${StackName}-${HydraApplication}-derivatives'
  DerivativeMountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'DerivativeVolume'
      SubnetId: !Select [ 0, !Ref 'SubnetID' ]
      SecurityGroups:
      - !Ref 'EFSSecurityGroup'
  DerivativeMountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'DerivativeVolume'
      SubnetId: !Select [ 1, !Ref 'SubnetID' ]
      SecurityGroups:
      - !Ref 'EFSSecurityGroup'
  DerivativeMountC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'DerivativeVolume'
      SubnetId: !Select [ 2, !Ref 'SubnetID' ]
      SecurityGroups:
      - !Ref 'EFSSecurityGroup'
  WorkingVolume:
    Type: "AWS::EFS::FileSystem"
    DeletionPolicy: Retain
    Properties:
      FileSystemTags:
      - Key: Name
        Value: !Sub '${StackName}-${HydraApplication}-working'
  WorkingMountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'WorkingVolume'
      SubnetId: !Select [ 0, !Ref 'SubnetID' ]
      SecurityGroups:
      - !Ref 'EFSSecurityGroup'
  WorkingMountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'WorkingVolume'
      SubnetId: !Select [ 1, !Ref 'SubnetID' ]
      SecurityGroups:
      - !Ref 'EFSSecurityGroup'
  WorkingMountC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref 'WorkingVolume'
      SubnetId: !Select [ 2, !Ref 'SubnetID' ]
      SecurityGroups:
      - !Ref 'EFSSecurityGroup'
Outputs:
  URL:
    Description: URL of the AWS Elastic Beanstalk Environment
    Value: !GetAtt 'webapp.Outputs.URL'
