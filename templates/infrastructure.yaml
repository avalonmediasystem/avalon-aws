AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra Base Stack
Parameters:
  StackName:
    Type: String
    Description: Name of the infrastructure stack (for tagging and naming)
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  S3Bucket:
    Type: String
    Description: S3 bucket to the cfn deployment artifacts
  S3BucketEB:
    Type: String
    Description: S3 bucket to the eb deployment artifacts
  S3KeyPrefix:
    Description: S3 prefix to deployment artifacts
    Type: String
    Default: infrastructure/current
  PublicZoneName:
    Type: String
    Description: Existing Route53 zone; used to create a public DNS record for the
      web application
    AllowedPattern: '^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+[A-Za-z]{2,63}$'
    ConstraintDescription: 'PublicZoneName must be a valid DNS zone WITHOUT a trailing dot'
  DatabaseUsername:
    Type: String
    Description: Database Root Username
    Default: ebroot
  DatabasePassword:
    Type: String
    Description: Password for the DB Root User
    NoEcho: 'true'
  DatabaseStorageSize:
    Type: Number
    Description: Size of DB in Gigs
    Default: '5'
  DatabaseMultiAZ:
    Type: String
    Description: Launch the database in multiple availability zones
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
  FcrepoDatabaseUser:
    Type: String
    Description: Database Root Username
    Default: fcrepo
  FcrepoDatabasePassword:
    Type: String
    Description: Password for the Fedora User
    NoEcho: 'true'
  FcrepoBinaryBucket:
    Type: String
    Description: S3 Bucket for Fedora's binary object store
  FcrepoInstanceType:
    Type: String
    Description: Instance type to launch
    Default: t2.large
  S3FedoraFilename:
    Type: String
    Description: S3 key to the Fcrepo war
    Default: fcrepo.war
  FcrepoMinSize:
    Type: Number
    Description: Minimum number of Fedora instances to launch
    Default: '1'
  FcrepoMaxSize:
    Type: Number
    Description: Maximum number of Fedora instances to launch
    Default: '1'
  SolrCloudInstanceType:
    Type: String
    Description: Instance type to launch
    Default: t2.large
  SolrS3Key:
    Type: String
    Description: S3 key to the Solr zip file
    Default: 'solr.zip'
  SolrCloudMinSize:
    Type: Number
    Description: Minimum number of Solr instances to launch
    Default: '3'
  SolrCloudMaxSize:
    Type: Number
    Description: Maximum number of Solr instances to launch
    Default: '9'
  SolrCloudSize:
    Type: Number
    Description: Number of Solr instances to launch
    Default: '3'
  SolrHealthReportingSystemType:
    Type: String
    Description: Health reporting for Solr stack
    Default: 'enhanced'
  RedisInstanceType:
    Type: String
    Description: Instance type to launch
    Default: cache.t2.small
  BastionInstanceType:
    Type: String
    Description: The EC2 instance type
    Default: t2.nano
  DatabaseInstanceType:
    Type: String
    Description: Instance type to launch
    Default: db.t2.large
  ZookeeperDNSRecordName:
    Type: String
    Description: DNS name for zookeeper
    Default: zk
  ZookeeperEnsembleInstanceType:
    Type: String
    Description: Instance type to launch
    Default: t2.micro
  ZookeeperS3Key:
    Type: String
    Description: S3 key to the Zookeeper zip file
    Default: 'zookeeper.zip'
  ZookeeperEnsembleMinSize:
    Type: Number
    Description: Minimum number of Zookeeper instances to launch
    Default: '2'
  ZookeeperEnsembleMaxSize:
    Type: Number
    Description: Maximum number of Zookeeper instances to launch
    Default: '6'
  ZookeeperEnsembleSize:
    Type: Number
    Description: Number of instances to launch
    Default: '2'
  ZookeeperHealthReportingSystemType:
    Type: String
    Description: Health reporting for zookeeper stack
    Default: 'enhanced'
  VpnUser:
    Description: The username for the VPN user
    Type: String
    Default: admin
  VpnPassword:
    Type: String
    Description: The password for the VPN user
    NoEcho: 'true'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Deployment Artifacts
      Parameters:
      - S3Bucket
      - S3KeyPrefix
      - S3BucketEB
    - Label:
        default: Network Configuration
      Parameters:
      - KeyName
      - PublicZoneName
    - Label:
        default: Resources
      Parameters:
      - DatabaseInstanceType
      - DatabaseUsername
      - DatabasePassword
      - RedisInstanceType
      - FcrepoInstanceType
      - SolrCloudSize
      - SolrCloudInstanceType
      - ZookeeperEnsembleInstanceType
    - Label:
        default: Fedora Repository Configuration
      Parameters:
      - S3FedoraFilename
    - Label:
        default: OpenVPN Configuration
      Parameters:
      - VpnUser
      - VpnPassword
Resources:
  vpc:
    Type: AWS::CloudFormation::Stack
    #DeletionPolicy: Retain
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        KeyName: !Sub '${KeyName}'
        HostedZoneName: !Sub '${StackName}.vpc.${PublicZoneName}'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/vpc.yaml'
  securitygroups:
    Type: AWS::CloudFormation::Stack
    #DeletionPolicy: Retain
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        VPC: !GetAtt 'vpc.Outputs.VPCID'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/securitygroups.yaml'
  solrcloud:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        S3Bucket: !Ref 'S3Bucket'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        KeyName: !Join [',', [!Ref 'KeyName']]
        SubnetID: !GetAtt [vpc, Outputs.PrivateSubnets]
        HostedZoneName: !GetAtt [vpc, Outputs.HostedZoneName]
        HostedZoneID: !GetAtt [vpc, Outputs.HostedZoneID]
        ZookeeperEnsembleSize: !Ref 'ZookeeperEnsembleSize'
        ZookeeperEnsembleMaxSize: !Ref 'ZookeeperEnsembleMaxSize'
        ZookeeperSecurityGroups: !Join [',', [!GetAtt [securitygroups, Outputs.Zookeeper],
            !GetAtt [securitygroups, Outputs.Default]]]
        ZookeeperHealthReportingSystemType: !Ref 'ZookeeperHealthReportingSystemType'
        ZookeeperS3Bucket: !Ref 'S3BucketEB'
        ZookeeperS3Key: !Ref 'ZookeeperS3Key'
        ZookeeperInstanceType: !Ref 'ZookeeperEnsembleInstanceType'
        ZookeeperDNSRecordName: !Ref 'ZookeeperDNSRecordName'
        SolrCloudSize: !Ref 'SolrCloudSize'
        SolrCloudMaxSize: !Ref 'SolrCloudMaxSize'
        SolrSecurityGroups: !Join [',', [!GetAtt [securitygroups, Outputs.Solr], !GetAtt [
            securitygroups, Outputs.Default]]]
        SolrHealthReportingSystemType: !Ref 'SolrHealthReportingSystemType'
        SolrS3Bucket: !Ref 'S3BucketEB'
        SolrS3Key: !Ref 'SolrS3Key'
        SolrCloudInstanceType: !Ref 'SolrCloudInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/solrcloud.yaml'
  fcrepo:
    Type: AWS::CloudFormation::Stack
    DependsOn: fcrepodb
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        KeyName: !Sub '${KeyName}'
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !Sub '${securitygroups.Outputs.Fcrepo},${securitygroups.Outputs.Default}'
        LBSecurityGroups: !GetAtt 'securitygroups.Outputs.FcrepoLb'
        S3Bucket: !Ref 'S3BucketEB'
        S3Key: !Ref 'S3FedoraFilename'
        MinSize: !Ref 'FcrepoMinSize'
        MaxSize: !Ref 'FcrepoMaxSize'
        HostedZoneName: !GetAtt 'vpc.Outputs.HostedZoneName'
        InstanceType: !Ref 'FcrepoInstanceType'
        RDSDatabaseName: !GetAtt 'fcrepodb.DatabaseName'
        RDSHostname: !GetAtt 'database.Outputs.EndpointAddress'
        RDSPort: !GetAtt 'database.Outputs.EndpointPort'
        RDSUsername: !Ref 'FcrepoDatabaseUser'
        RDSPassword: !Ref 'FcrepoDatabasePassword'
        BinaryBucket: !Ref 'FcrepoBinaryBucket'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/fcrepo.yaml'
  redis:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.Redis'
        InstanceType: !Ref 'RedisInstanceType'
        HostedZoneName: !GetAtt 'vpc.Outputs.HostedZoneName'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/redis.yaml'
  database:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.Database'
        MasterUsername: !Ref 'DatabaseUsername'
        MasterUserPassword: !Ref 'DatabasePassword'
        AllocatedStorage: !Ref 'DatabaseStorageSize'
        MultiAZDatabase: !Ref 'DatabaseMultiAZ'
        DBInstanceClass: !Ref 'DatabaseInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/postgres.yaml'
  lambdaenv:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        S3Bucket: !Ref 'S3Bucket'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        Package: 'lambdaenvironment'
        AllowedActions: 'lambda:*,ec2:*'
        Timeout: '10'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/lambdafunction.yaml'
  createschema:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        S3Bucket: !Ref 'S3Bucket'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        Package: 'createdatabase'
        SubnetID: !GetAtt 'vpc.Outputs.PublicSubnets'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.DatabaseClient'
        AllowedActions: 'rds:*'
        Timeout: '60'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/lambdafunction.yaml'
  createschemaconfig:
    Type: Custom::LambdaEnvironmentConfiguration
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'lambdaenv.Outputs.ServiceToken'
      FunctionName: !GetAtt 'createschema.Outputs.ServiceToken'
      Environment:
        DBHostname: !GetAtt 'database.Outputs.EndpointAddress'
        DBPort: !GetAtt 'database.Outputs.EndpointPort'
        MasterUser: !Ref 'DatabaseUsername'
        MasterPassword: !Ref 'DatabasePassword'
  fcrepodb:
    Type: Custom::DatabaseSchema
    DependsOn: createschemaconfig
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'createschemaconfig.ServiceToken'
      DBName: 'fcrepo'
      DBUser: !Ref 'FcrepoDatabaseUser'
      DBPassword: !Ref 'FcrepoDatabasePassword'
#  mail:
#    Type: AWS::CloudFormation::Stack
#    DependsOn: vpc
#    Properties:
#      Parameters:
#        Domain: !Sub '${StackName}.${PublicZoneName}'
#        HostedZoneName: !Sub '${StackName}.${PublicZoneName}'
#        StackName: !Ref 'StackName'
#      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/mail.yaml'
  openvpn:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'StackName'
        KeyName: !Sub '${KeyName}'
        SubnetID: !Select ['0', !Split [',', !GetAtt 'vpc.Outputs.PublicSubnets']]
        SecurityGroups: !Sub '${securitygroups.Outputs.Bastion},${securitygroups.Outputs.OpenVPN}'
        HostedZoneName: !Sub '${StackName}.${PublicZoneName}'
        VpnUser: !Ref 'VpnUser'
        VpnPassword: !Ref 'VpnPassword'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/openvpn.yaml'
  PublicDNS:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub '${StackName}.${PublicZoneName}.'
  PublicDNSNameServers:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub '${StackName}.${PublicZoneName}.'
      HostedZoneName: !Sub '${PublicZoneName}.'
      Type: NS
      TTL: '900'
      ResourceRecords: !GetAtt 'PublicDNS.NameServers'
Outputs:
  VPN:
    Description: URL for the OpenVPN server
    Value: !GetAtt 'openvpn.Outputs.URL'
  PublicZoneName:
    Description: Name of the public subzone
    Value: !Sub '${StackName}.${PublicZoneName}'
    Export:
      Name: !Sub '${StackName}-dns-PublicZoneName'
  DatabaseAddress:
    Description: Postgres endpoint address
    Value: !GetAtt 'database.Outputs.EndpointAddress'
    Export:
      Name: !Sub '${StackName}-db-EndpointAddress'
  DatabasePort:
    Description: Postgres endpoint port
    Value: !GetAtt 'database.Outputs.EndpointPort'
    Export:
      Name: !Sub '${StackName}-db-EndpointPort'
